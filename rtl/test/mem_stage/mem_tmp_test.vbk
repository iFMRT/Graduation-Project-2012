/******** Time scale ********/
`timescale 1ns/1ps

/******** 头文件 ********/
`include "stddef.h"
`include "cpu.h"

/******** 测试模块 ********/
module mem_tmp_test;
    /******** 输入输出端口信号 ********/
    // 时钟 & 复位
    reg clk;                              // 时钟
    reg reset;                            // 异步复位
    // SPM 接口
    reg [`WORD_DATA_BUS] spm_rd_data;     // SPM：读取的数据
    wire [`WORD_ADDR_BUS] spm_addr;       // SPM：地址
    wire                  spm_as_;        // SPM：地址选通
    wire                  spm_rw;         // SPM：读/写
    wire [`WORD_DATA_BUS] spm_wr_data;    // SPM：写入的数据
    /********** EX/MEM 流水线寄存器 **********/
    reg [`MEM_OP_BUS]     ex_mem_op;      // 内存操作
    reg [`WORD_DATA_BUS]  ex_mem_wr_data; // 内存写入数据
    reg [`REG_ADDR_BUS]   ex_dst_addr;    // 通用寄存器写入地址
    reg                   ex_gpr_we_;     // 通用寄存器写入有效
    reg [`WORD_DATA_BUS]  ex_out;         // EX阶段处理结果
    /********** MEM/WB 流水线寄存器 **********/
    wire [`REG_ADDR_BUS]  mem_dst_addr;   // 通用寄存器写入地址
    wire                  mem_gpr_we_;    // 通用寄存器写入有效
    wire [`WORD_DATA_BUS] mem_out;        // 处理结果

        /********** 内部信号 **********/
    wire [`WORD_DATA_BUS]        rd_data;         // 读取的数据
    wire [`WORD_ADDR_BUS]        addr;            // 地址
    wire                         as_;             // 地址选通
    wire                         tmp_as_;
    wire                         rw;              // 读/写
    wire [`WORD_DATA_BUS]        wr_data;         // 写入的数据
    wire [`WORD_DATA_BUS]        out;             // 内存访问结果
    wire                         miss_align;      // 未对齐

    /******** 定义仿真循环 ********/
    parameter             STEP = 10;

    assign tmp_as_ = `ENABLE_;

    /******** 生成时钟 ********/
    always #(STEP / 2) begin
        clk <= ~clk;
    end

    /******** 实例化测试模块 ********/
    // /********** 内存访问控制模块 **********/
    mem_ctrl mem_ctrl (
        /********** EX/MEM 流水线寄存器 **********/
        .ex_mem_op        (ex_mem_op),       // 内存操作(空操作/字读取/字写入)
        .ex_mem_wr_data   (ex_mem_wr_data),  // 内存写入数据
        .ex_out           (ex_out),          // EX 阶段处理结果
        /********** 内存访问接口 **********/
        .rd_data          (rd_data),         // 读取的数据
        .addr             (addr),            // 地址
        .as_              (as_),             // 地址选通
        .rw               (rw),              // 读/写
        .wr_data          (wr_data),         // 写入的数据
        /********** 内存访问结果 **********/
        .out              (out),             // 内存访问结果
        .miss_align       (miss_align)       // 未对齐
    );

    /********** 总线接口 **********/
    bus_if bus_if (
        /********** CPU 接口 **********/
        .addr             (addr),            // CPU：地址
        .as_              (as_),         // CPU：地址有效
        .rw               (rw),              // CPU：读/写
        .wr_data          (wr_data),         // CPU：写入的数据
        .rd_data          (rd_data),         // CPU：读入的数据
        /********** SPM接口 **********/
        .spm_rd_data      (spm_rd_data),     // SPM：读取的数据
        .spm_addr         (spm_addr),        // SPM：地址
        .spm_as_          (spm_as_),         // SPM：地址选通
        .spm_rw           (spm_rw),          // SPM：读/写
        .spm_wr_data      (spm_wr_data)      // SPM：写入的数据
    );

    /******** 测试用例 ********/
    initial begin
        # 0 begin
            /******** 字读取（对齐）测试输入 ********/
            ex_mem_op      <= `MEM_OP_LDW;
            ex_mem_wr_data <= `WORD_DATA_W'h999;        // don't care, e.g: 0x999
            ex_out         <= `WORD_DATA_W'h154;

            // tmp_as_         <= `DISABLE_;

            spm_rd_data    <= `WORD_DATA_W'h24;
        end
        # STEP begin
            /******** 字读取（对齐）测试输出 ********/
            if ( (out == 32'h24)                     &&
                 (miss_align  == `DISABLE)           &&
                 (spm_addr     == `WORD_ADDR_W'h55)  &&
                 (spm_as_      == `ENABLE_)          &&
                 (spm_rw       == `READ)             &&
                 (as_      == `ENABLE_)             &&
                 (spm_wr_data  == `WORD_DATA_W'h999)        // don't care, e.g: 0x999

                 ) begin
                $display("mem ctrl & bus if 模块【字读取（对齐）】测试通过！ ");
            end else begin
                $display("mem ctrl & bus if 模块【字读取（对齐）】测试没有通过！！！");
            end
        end
        # STEP begin
            $finish;
        end
    end // initial begin

    /******** 输出波形 ********/
    initial begin
       $dumpfile("mem_tmp.vcd");
       $dumpvars(0,mem_ctrl, bus_if);
    end
endmodule // mem_stage_test
