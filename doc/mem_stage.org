* Memory（MEM）阶段

MEM 阶段主要负责内存。MEM 阶段由内存访问控制模块、流水线寄存器、以及总线接口构成。

- MEM 阶段模块一览
| 模块名    | 文件名      | 说明                 |
| mem_stage | mem_stage.v | MEM 阶段顶层模块     |
| mem_ctrl  | mem_ctrl.v  | 内存访问控制模块     |
| mem_reg   | mem_reg.v   | MEM 阶段流水线寄存器 |
| bus_if    | bus_if.v    | 总线接口             |

#+BEGIN_SRC

mem_stage
    |-----mem_ctrl
    |-----mem_reg
    |-----bus_if

#+END_SRC

** MEM  阶段顶层模块

MEM 阶段顶层模块用来连内存访问控制模块、MEM 阶段流水线寄存器、与总线接口。

*** MEM 阶段顶层模块输入输出端口 

- MEM 阶段顶层模块端口连接图
[[file:img/if_stage.png]]

- 时钟和复位
| 信号名 | 信号类型 | 数据类型 | 位宽 | 含义     |
| clk    | 输入端口 | wire     |    1 | 时钟     |
| reset  | 输入端口 | wire     |    1 | 异步复位 |

- EX/MEM 流水线寄存器
| 信号名         | 信号类型 | 数据类型 | 位宽 | 含义                                                 |
| ex_mem_op      | 输入端口 | wire     |    2 | MEM_OP_NOP/MEM_OP_LDW（字读取）/MEM_OP_STW（字写入） |
| ex_mem_wr_data | 输入端口 | wire     |   32 | 内存写入数据                                         |
| ex_out         | 输入端口 | wire     |   32 | EX 阶段处理结果                                      |
| ex_dst_addr    | 输入端口 | wire     |    5 | 通用寄存器写入地址                                   |
| ex_gpr_we_     | 输入端口 | wire     |    1 | 通用寄存器写入有效                                   |

- MEM/WB 流水线寄存器
| 信号名       | 信号类型 | 数据类型 | 位宽 | 含义               |
| mem_dst_addr | 输出端口 | reg      |    5 | 通用寄存器写入地址 |
| mem_gpr_we_  | 输出端口 | reg      |    1 | 通用寄存器写入有效 |
| mem_out      | 输出端口 | reg      |   32 | 处理结果           |

*** MEM 阶段顶层模块代码详解

#+BEGIN_SRC verilog

    /********** 内部信号 **********/
    wire [`WordDataBus]        rd_data;         // 读取的数据
    wire [`WordAddrBus]        addr;            // 地址
    wire                       as_;             // 地址选通
    wire                       rw;              // 读/写
    wire [`WordDataBus]        wr_data;         // 写入的数据
    wire [`WordDataBus]        out;             // 内存访问结果
    wire                       miss_align;      // 未对齐


    /********** 内存访问控制模块 **********/
    mem_ctrl mem_ctrl (
        /********** EX/MEM 流水线寄存器 **********/
        .ex_mem_op        (ex_mem_op),       // 内存操作(空操作/字读取/字写入)
        .ex_mem_wr_data   (ex_mem_wr_data),  // 内存写入数据
        .ex_out           (ex_out),          // EX 阶段处理结果
        /********** 内存访问接口 **********/
        .rd_data          (rd_data),         // 读取的数据
        .addr             (addr),            // 地址
        .as_              (as_),             // 地址选通
        .rw               (rw),              // 读/写
        .wr_data          (wr_data),         // 写入的数据
        /********** 内存访问结果 **********/
        .out              (out),             // 内存访问结果
        .miss_align       (miss_align)       // 未对齐
    );

    /********** 总线接口 **********/
    bus_if bus_if (
        /********** 时钟 & 复位 **********/
        .clk              (clk),             // 时钟
        .reset            (reset),           // 异步复位
        /********** CPU 接口 **********/
        .addr             (addr),            // CPU：地址
        .as_              (as_),             // CPU：地址有效
        .rw               (rw),              // CPU：读/写
        .wr_data          (wr_data),         // CPU：写入的数据
        .rd_data          (rd_data),         // CPU：读入的数据
        /********** SPM 接口 **********/
        .spm_rd_data      (spm_rd_data),     // SPM：读取的数据
        .spm_addr         (spm_addr),        // SPM：地址
        .spm_as_          (spm_as_),         // SPM：地址选通
        .spm_rw           (spm_rw),          // SPM：读/写
        .spm_wr_data      (spm_wr_data),     // SPM：写入的数据
    );

    /********** MEM 阶段流水线寄存器 **********/
    mem_reg mem_reg (
        /********** 时钟 & 复位 **********/
        .clk              (clk),             // 时钟
        .reset            (reset),           // 异步复位
        /********** 内存访问结果 **********/
        .out              (out),             // 结果
        .miss_align       (miss_align),      // 未对齐
        /********** EX/MEM 流水线寄存器 **********/
        .ex_dst_addr      (ex_dst_addr),     // 通用寄存器写入地址
        .ex_gpr_we_       (ex_gpr_we_),      // 通用寄存器写入有效
        /********** MEM/WB 流水线寄存器 **********/
        .mem_dst_addr     (mem_dst_addr),    // 通用寄存器写入地址
        .mem_gpr_we_      (mem_gpr_we_),     // 通用寄存器写入有效
        .mem_out          (mem_out)          // 处理结果
    );

#+END_SRC

*** Testbench

STEP 为一个周期的时间

#+BEGIN_SRC verilog

/******** 生成时钟 ********/
always #(STEP / 2) begin
    clk <= ~clk;
end

#+END_SRC

**** 初始化信号 （# 0）
假设读取的地址是 0x154，该地址的值是 0x24。
- 输入信号
| clk  | reset   | spm_rd_data      | ex_mem_op   | ex_mem_wr_data                | ex_dst_addr                | ex_gpr_we_ | ex_out            |
| 1'h1 | `ENABLE | `WORD_DATA_W'h24 | `MEM_OP_LDW | `WORD_DATA_W'h999(don't care) | `REG_ADDR_W'h7(don't care) | `DISABLE_  | `WORD_DATA_W'h154 |

- 输出信号
| spm_addr         | spm_as_  | spm_rw | spm_wr_data       | mem_dst_addr   | mem_gpr_we_ | mem_out         |
| 'WORD_ADDR_W'h55 | `ENABLE_ | `READ  | `WORD_DATA_W'h999 | `REG_ADDR_W'h0 | `DISABLE_   | `WORD_DATA_W'h0 |

**** 字读取（对齐）
假设读取的地址是 0x154，该地址的值是 0x24。
- 输入信号
| *reset*    | spm_rd_data      | ex_mem_op   | ex_mem_wr_data                | ex_dst_addr                | ex_gpr_we_ | ex_out            |
| *`DISABLE* | `WORD_DATA_W'h24 | `MEM_OP_LDW | `WORD_DATA_W'h999(don't care) | `REG_ADDR_W'h7(don't care) | `DISABLE_  | `WORD_DATA_W'h154 |

- 输出信号
| spm_addr         | spm_as_  | spm_rw | spm_wr_data       | mem_dst_addr   | mem_gpr_we_ | mem_out          |
| 'WORD_ADDR_W'h55 | `ENABLE_ | `READ  | `WORD_DATA_W'h999 | `REG_ADDR_W'h7 | `DISABLE_   | `WORD_DATA_W'h24 |

**** 字读取（未对齐）
假设读取的地址是 0x59，该地址的值是 0x24。
- 输入信号
| spm_rd_data      | ex_mem_op   | ex_mem_wr_data                | ex_dst_addr                | ex_gpr_we_ | *ex_out*           |
| `WORD_DATA_W'h24 | `MEM_OP_LDW | `WORD_DATA_W'h999(don't care) | `REG_ADDR_W'h7(don't care) | `DISABLE_  | *`WORD_DATA_W'h59* |

- 输出信号
| spm_addr         | *spm_as_* | spm_rw | spm_wr_data       | *mem_dst_addr*   | mem_gpr_we_ | *mem_out*         |
| 'WORD_ADDR_W'h16 | `DISABLE_ | `READ  | `WORD_DATA_W'h999 | *`REG_ADDR_W'h0* | `DISABLE_   | *`WORD_DATA_W'h0* |

**** 字写入（对齐）
假设写入的地址是 0x154，地址的值是 0x24，写入的数据是 0x13。
- 输入信号
| spm_rd_data      | *ex_mem_op*   | *ex_mem_wr_data*   | ex_dst_addr                | ex_gpr_we_ | *ex_out*            |
| `WORD_DATA_W'h24 | *`MEM_OP_STW* | *`WORD_DATA_W'h13* | `REG_ADDR_W'h7(don't care) | `DISABLE_  | *`WORD_DATA_W'h154* |

- 输出信号
| *spm_addr*         | *spm_as_*  | *spm_rw* | *spm_wr_data*      | *mem_dst_addr*   | mem_gpr_we_ | mem_out         |
| *`WORD_ADDR_W'h55* | *`ENABLE_* | *`WRITE* | *`WORD_DATA_W'h13* | *`REG_ADDR_W'h7* | `DISABLE_   | `WORD_DATA_W'h0 |

**** 字写入（未对齐）
假设读取的地址是 0x59，该地址的值是 0x24，写入的数据是 0x13。
- 输入信号
| spm_rd_data      | ex_mem_op   | ex_mem_wr_data   | ex_dst_addr                | ex_gpr_we_ | *ex_out*           |
| `WORD_DATA_W'h24 | `MEM_OP_STW | `WORD_DATA_W'h13 | `REG_ADDR_W'h7(don't care) | `DISABLE_  | *`WORD_DATA_W'h59* |

- 输出信号
| *spm_addr*         | *spm_as_*   | *spm_rw* | spm_wr_data      | *mem_dst_addr*   | mem_gpr_we_ | mem_out         |
| *`WORD_ADDR_W'h16* | *`DISABLE_* | *`READ*  | `WORD_DATA_W'h13 | *`REG_ADDR_W'h0* | `DISABLE_   | `WORD_DATA_W'h0 |

**** 无内存访问
假设 EX 阶段运算的结果是 0x59，当被视作地址时，该地址的值是 0x24。
- 输入信号
| spm_rd_data      | *ex_mem_op*   | *ex_mem_wr_data*                | ex_dst_addr                | *ex_gpr_we_* | ex_out           |
| `WORD_DATA_W'h24 | *`MEM_OP_NOP* | *`WORD_DATA_W'h999(don't care)* | `REG_ADDR_W'h7(don't care) | *`ENABLE_*   | `WORD_DATA_W'h59 |

- 输出信号
| spm_addr         | spm_as_   | spm_rw | *spm_wr_data*       | *mem_dst_addr*   | *mem_gpr_we_* | *mem_out*          |
| `WORD_ADDR_W'h16 | `DISABLE_ | `READ  | *`WORD_DATA_W'h999* | *`REG_ADDR_W'h7* | *`ENABLE_*    | *`WORD_DATA_W'h59* |

** 内存访问控制模块

*** 内存访问控制模块输入输出端口

- 内存访问控制模块端口连接图
[[file:img/mem_ctrl.png]]

- EX/MEM 流水线寄存器（mem_ctrl.v）
| 信号名         | 信号类型 | 数据类型 | 位宽 | 含义                                                 |
| ex_mem_op      | 输入端口 | wire     |    2 | MEM_OP_NOP/MEM_OP_LDW（字读取）/MEM_OP_STW（字写入） |
| ex_mem_wr_data | 输入端口 | wire     |   32 | 内存写入数据                                         |
| ex_out         | 输入端口 | wire     |   32 | EX 阶段处理结果                                      |

- 内存访问接口（mem_ctrl.v）
| 信号名  | 信号类型 | 数据类型 | 位宽 | 含义       |
| rd_data | 输入端口 | wire     |   32 | 读取的数据 |
| addr    | 输出端口 | wire     |   30 | 地址       |
| as_     | 输出端口 | reg      |    1 | 地址选通   |
| rw      | 输出端口 | reg      |    1 | 读/写      |
| wr_data | 输出端口 | wire     |   32 | 写入的数据 |

- 内存访问结果（mem_ctrl.v）
| 信号名     | 信号类型 | 数据类型 | 位宽 | 含义         |
| out        | 输出端口 | reg      |   32 | 内存访问结果 |
| miss_align | 输出端口 | reg      |    1 | 未对齐       |
| offset     | 内部信号 | wire     |    2 | 字节偏移     |

*** 内存访问控制模块代码详解

- 内存访问控制模块（mem_ctrl.v）
#+BEGIN_SRC verilog

/******** 1. 输出的赋值 ********/
assign wr_data = ex_mem_wr_data;          // EX 阶段的写入数据（ex_mem_wr_data）赋值给写入数据（wr_data）
assign addr    = ex_out[`WordAddrLoc];    // EX 阶段处理结果（ex_out）的高 30 位作为内存访问地址（addr）
assign offset  = ex_out[`ByteOffsetLoc];  // EX 阶段处理结果（ex_out）的低 2 位作为字节偏移（offset）

/******** 内存访问的控制 ********/
always @(*) begin
    /* 2. 默认值 */
    miss_align = `DISABLE;
    out        = `WORD_DATA_W'h0;         // 输出信号默认为 0
    as_        = `DISABLE_;               // 地址选通信号默认为无效
    rw         = `READ;                   // 读/写信号默认为读取 
    /* 内存访问 */
    case (ex_mem_op)
        `MEM_OP_lDW: begin                         // 3. 字读取
            /* 字节偏移的检测 */
            if (offset == `BTYE_OFFSET_WORD) begin // 对齐（字节偏移为 0
                out        = rd_data;              // 将读取数据赋值到输出
                as_        = `ENABLE_;　　　　　　　
            end else begin                         // 未对齐
                miss_align = `ENABLE;             
            end
        end
        `MEM_OP_STW: begin                         // 4. 字写入
            if (offset == `BTYE_OFFSET_WORD) begin // 对齐（字节偏移为 0
                rw         = `WRITE;　　　　　　　  
                as_        = `ENABLE_;
            end else begin                         // 未对齐
                miss_align = `ENABLE;
            end
        end
        default    : begin                         // 5. 无内存访问
            out            = ex_out;               // 将 EX 阶段的输出赋值给输出
        end
    endcase
end
                
#+END_SRC

*** Testbench

**** 字读取（对齐）
假设读取的地址是 0x154，该地址的值是 0x24。
- 输入信号
| ex_mem_op   | ex_mem_wr_data                | ex_out | rd_data |
| `MEM_OP_LDW | `WORD_DATA_W'h999(don't care) |  0x154 |    0x24 |

- 输出信号
| addr | as_      | rw    | wr_data           |  out | miss_align |
| 0x55 | `ENABLE_ | `READ | `WORD_DATA_W'h999 | 0x24 | `DISABLE   |

**** 字读取（未对齐）
假设读取的地址是 0x59，该地址的值是 0x24。
- 输入信号
| ex_mem_op   | ex_mem_wr_data                | ex_out | rd_data |
| `MEM_OP_LDW | `WORD_DATA_W'h999(don't care) |   0x59 |    0x24 |

- 输出信号
| addr | as_       | rw    | wr_data           | out             | miss_align |
| 0x16 | `DISABLE_ | `READ | `WORD_DATA_W'h999 | `WORD_DATA_W'h0 | `ENABLE    |

**** 字写入（对齐）
假设写入的地址是 0x154，地址的值是 0x24，写入的数据是 0x13。
- 输入信号
| ex_mem_op   | ex_mem_wr_data | ex_out | rd_data |
| `MEM_OP_STW |           0x13 |  0x154 |    0x24 |

- 输出信号
| addr | as_      | rw     | wr_data | out             | miss_align |
| 0x55 | `ENABLE_ | `WRITE |    0x13 | `WORD_DATA_W'h0 | `DISABLE   |

**** 字写入（未对齐）
假设读取的地址是 0x59，该地址的值是 0x24，写入的数据是 0x13。
- 输入信号
| ex_mem_op   | ex_mem_wr_data | ex_out | rd_data |
| `MEM_OP_STW |           0x13 |   0x59 |    0x24 |

- 输出信号
| addr | as_       | rw    | wr_data | out             | miss_align |
| 0x16 | `DISABLE_ | `READ |    0x13 | `WORD_DATA_W'h0 | `ENABLE    |

**** 无内存访问
假设 EX 阶段运算的结果是 0x59，当被视作地址时，该地址的值是 0x24。
- 输入信号
| ex_mem_op   | ex_mem_wr_data                | ex_out | rd_data |
| `MEM_OP_NOP | `WORD_DATA_W'h999(don't care) |   0x59 |    0x24 |

- 输出信号
| addr | as_       | rw    | wr_data           |  out | miss_align |
| 0x16 | `DISABLE_ | `READ | `WORD_DATA_W'h999 | 0x59 | `DISENABLE |
 
** MEM 阶段流水线寄存器

*** MEM 阶段流水线寄存器输入输出端口

- MEM 阶段流水线寄存器端口连接图
[[file:img/mem_reg.png]]

- 时钟和复位（mem_reg.v）
| 信号名 | 信号类型 | 数据类型 | 位宽 | 含义     |
| clk    | 输入端口 | wire     |    1 | 时钟     |
| reset  | 输入端口 | wire     |    1 | 异步复位 |

- 内存访问结果（mem_reg.v）
| 信号名     | 信号类型 | 数据类型 | 位宽 | 含义   |
| out        | 输入端口 | wire     |   32 | 结果   |
| miss_align | 输入端口 | wire     |    1 | 未对齐 |

- EX/MEM 流水线寄存器（mem_reg.v）
| 信号名      | 信号类型 | 数据类型 | 位宽 | 含义               |
| ex_dst_addr | 输入端口 | wire     |    5 | 通用寄存器写入地址 |
| ex_gpr_we_  | 输入端口 | wire     |    1 | 通用寄存器写入有效 |

- MEM/WB 流水线寄存器（mem_reg.v）
| 信号名       | 信号类型 | 数据类型 | 位宽 | 含义               |
| mem_dst_addr | 输出端口 | reg      |    5 | 通用寄存器写入地址 |
| mem_gpr_we_  | 输出端口 | reg      |    1 | 通用寄存器写入有效 |
| mem_out      | 输出端口 | reg      |   32 | 处理结果           |

*** MEM 阶段流水线寄存器代码详解

- MEM 阶段流水线寄存器（mem_reg.v）
#+BEGIN_SRC verilog

/******** 流水线寄存器 ********/
always @(posedge clk or `RESET_EDGE reset) begin
    if (reset == `RESET_ENABLE) begin
        /* 1. 异步复位：全部控制信号设置为无效，数据信号设为 0*/
        mem_dst_addr <= #1 `REG_ADDR_W'h0;
        mem_gpr_we_  <= #1 `DISABLE;
        mem_out      <= #1 `WORD_DATA_W'h0;
    end else begin
        if (miss_align == `ENABLE) begin            // 2. 未对齐异常的检测：中止正在进行的操作
            mem_dst_addr <= #1 `REG_ADDR_W'h0;      // 通用寄存器写入地址设置为 0
            mem_gpr_we_  <= #1 `DISABLE;            // 通用寄存器写入有效信号设为无效
            mem_out      <= #1 `WORD_DATA_W'h0;     // 处理结果设置为 0
        end else begin                              // 3. 更新流水线到下一个数据：内存操作的结果在此处被存储到流水线寄存器
            mem_dst_addr <= #1 ex_dst_addr;
            mem_gpr_we_  <= #1 ex_gpr_we_;
            mem_out      <= #1 out;
        end 
    end
end

#+END_SRC

*** Testbench

**** 初始化（复位，延迟 0 个时钟周期）
假设读取的地址是 0x154，该地址的值是 0x24。
- 输入信号
| clk    | reset   | out                           | miss_align | ex_dst_addr                | ex_gpr_we_           |
| `HIGHT | `ENABLE | `WORD_DATA_W'h999(don't care) | 1'h0       | `REG_ADDR_W'h7(don't care) | `ENABLE_(don't care) |

- 输出信号
| mem_dst_addr | mem_gpr_we_ | mem_out |
|              |             |         |

**** 更新流水线到下一个数据（对齐）
- 输入信号
| reset      | out                           | miss_align | ex_dst_addr                | ex_gpr_we_           |
| `DISENABLE | `WORD_DATA_W'h999(don't care) | 1'h0       | `REG_ADDR_W'h7(don't care) | `ENABLE_(don't care) |

- 输出信号
| mem_dst_addr   | mem_gpr_we_ | mem_out           |
| `REG_ADDR_W'h7 | `ENABLE_    | `WORD_DATA_W'h999 |

**** 未对齐异常
- 输入信号
| reset      | out                           | miss_align | ex_dst_addr                | ex_gpr_we_           |
| `DISENABLE | `WORD_DATA_W'h999(don't care) | 1'h1       | `REG_ADDR_W'h7(don't care) | `ENABLE_(don't care) |

- 输出信号
| mem_dst_addr   | mem_gpr_we_ | mem_out         |
| `REG_ADDR_W'h0 | `DISABLE_   | `WORD_DATA_W'h0 |

**  总线接口

