* FMRT SoC 代码规范


Verilog HDL 程序一个代码文件中仅包含一个模块，并且文件名与模块名一致。

代码中避免使用魔术数字（Magic number），应采用宏。魔术数字是指嵌入代码中的常数。不使用魔术数字可以增强代码的可移植性。全部宏都在头文件中定义。

每行代码文字数量都在 80 以内，行的缩进使用制表符。制表符的优点是宽度可在文本编辑器内设定，阅读代码的人可以自由调整。

** 变量名与宏的命名规则

*变量名* 应包含以下三类信息：
- 变量的内容（它代表什么）
- 数据的种类（具名常量、简单变量、用户自定义类型）
- 变量的作用域（局部或者全局的作用域）

*变量名* 使用英文小写字母、数字以及下划线（_）进行命名。

为了明确控制信号的极性， *负逻辑信号线* 的名称以下划线（_）结尾。

*宏* 使用英文大写字母、英文小写字母、数字以及下划线（_）进行命名。

*常数* 使用大写英文字母和下划线（_）进行命名。

在定义 *比特位* 或 *总线* 时，使用单词首字母大写的驼峰拼写法（Upper CamelCase）。

宏的定义在头文件中进行。头文件中加入包含文件防范（Include guard）语句防止重复定义。包含文件防范是防止同一个文件被多次包含的技术。包含文件中的代码全部写在 ~`ifndef~ 之中，并在其中定义防范用的宏。当再次引用该文件时， ~`ifndef~ 中的代码就会无效。命名规则如下：

#+BEGIN_SRC 

`ifndef _ _INC_GUARD_ _      // 包含文件防范
    `define _ _INC_GUARD_ _  // 包含文件防范用的宏

    `define DataBus 31:0     // 比特位或总线用驼峰拼写法
    `define DATA_W  32       // 常数使用大写英文字母和下划线
`endif                       // 包含文件防范

#+END_SRC

** 选择好变量名的注意事项

*** 最重要的命名注意事项

为变量命名时最重要的考虑事项是，该名字要完全、准确地描述出该变量所代表的事物。获得好名字的一种实用技巧就是用文字表达变量所代表的是什么。通常，对变量的描述就是最佳的变量名。

*** 以问题为导向

一个好记的名字反映的通常都是问题，而不是解决方案。一个好名字通常表达的是 “什么”（what），而不是 “如何”（how）。

*** 最适当的名字长度

足够长，可以让你无须苦苦思索，同时避免名字太长了 —— 长得很不实用。

- 变量名太长、太短或刚好合适的实例
| 太长   | numberOfPeopleOnTheUsOlympicTeam   |
| 太短　 | n, np, ntm                         |
| 正好   | numberTeamMemoers, teamMemberCount |

*** 变量名中的计算值限定词

很多程序都有表示计算结果的变量：总额、平均值、最大值等等。如果你要用类似于 Total、Sum、Average、Max、Min、Record、String、Pointer 这样的限定词来修改某个名字，那么请记住把限定词加到名字的最后。

*** 变量名对作用域的影响

短的变量名总是不好吗？不，不总是这样。当你把一个变量名取得很短的时候，如 i,这一长度本身就对该变量做出了一些说明 —— 也就是说，该变量代表的是一个临时的数据，它的作用域非常有限。 阅读该变量的程序员应该会明白，这一数值只会用于几行代码之内。当你把变量命名为 i 的时候，你就是在表示“这是一个普通的循环计数器或者数组下标，在这几行代码之外他没任何作用”。W.J.Hansen 所做的一项研究表明，较长的名字适用于很少用到的变量或者全局变量，而较短的名字则适用于局部变量或者循环变量（Shneiderman 1980）。不过，短的变量名常常会带来一些麻烦，因此，作为一项防御式编程策略，一些细心的程序员会避免使用短的变量名。

*对位于全局命名空间中的名字加以限定词* 如果你在全局命名空间中定义了一些变量（具体常量、类名等），那么请考虑你是否需要采用这种方式对全局命名空间进行划分，并避免产生命名冲突。为全局可见的类加上带有子系统特征的前缀。用户接口部分的雇员类可能命名为 uiEmployee，数据库部分的雇员类可能命名为 dbEmployee，这样做能把全局命名空间的命名冲突降到最低。

*** 变量名中的常用对仗词

对仗词的使用要准确。通过应用命名规则来提高对仗词使用的一致性，从而提高其可读性。比如像 begin/end 这样的一组用词非常容易理解和记忆。而那些与常用语言相去甚远的词则通常很难记忆，有时甚至会产生歧义。下面是一些常用的对仗词：

- begin/end
- first/last
- locked/unlocked
- min/max
- next/previous
- new/old
- opened/closed
- visible/invisible
- source/target
- source/destination
- up/down

** 为特定类型的数据命名 

*** 为循环下标命名

***  为状态变量命名

*** 为临时变量命名

*** 为布尔变量命名

*** 为枚举类型命名

*** 为常量命名

** 非正式命名规则

** 创建具备可读性的短名字

*** 缩写的一般知道原则

*** 有关缩写的评论

** 应该避免的名字

- 避免使用令人误解的名字或者缩写
- 避免使用具有相似含义的名字
- 避免使用具有不同含义但却有相似名字的变量
- 避免使用发音相近的名字，比如 wrap 和 rap
- 避免在名字中使用数字
- 避免使用英语中常常拼错的单词
- 不要仅依靠大小写区分变量名
- 避免使用多种自然语言
- 避免使用标准类型、变量和子程序的名字
- 不要使用与变量含义完全无关的名字 
- 避免在名字中包含容易混淆的字符


** 总结

- 好的变量名是提高程序可读性的一项关键要素。对特殊种类的变量，比如循环下标和状态变量，需要加以特殊的考虑。 
- 名字要尽可能地具体。那些太模糊或者太通用以致于能够用于多种目的的名字通常都是很不好的。
- 命名规则应该能够区分局部数据、类数据和全局数据。它们还应该可以区分类型名、具名常量、枚举类型名字和变量名。
- 无论做哪种类型项目，你都应该采用某种变量命名规则。你所采用的规则的种类取决于你的程序的规模，以及项目成员人数。
- 代码阅读的次数远远多于编写的次数。确保你所取的名字更侧重于阅读方便而不是编写方便。
